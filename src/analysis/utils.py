# src/analysis/utils.py

import sqlite3
from pathlib import Path

DB_PATH = Path("db/bbline.sqlite")


def check_db_exists():
    """–Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∞–∑—ã. –ë—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–π –≤ —Ç–µ—Å—Ç–∞—Ö –∏–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ)."""
    if not DB_PATH.exists():
        raise FileNotFoundError(f"‚ùå –ë–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DB_PATH}")


def fetchall(query, params=(), safe=True):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç list[sqlite3.Row].
    safe=True ‚Äî –ø–µ—á–∞—Ç–∞–µ—Ç –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ (–¥–ª—è CLI/–æ—Ç—á—ë—Ç–æ–≤).
    safe=False ‚Äî –±—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤).
    """
    try:
        check_db_exists()
        with sqlite3.connect(DB_PATH) as conn:
            conn.row_factory = sqlite3.Row
            return conn.execute(query, params).fetchall()
    except Exception as e:
        if safe:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}\nSQL: {query}")
            return []
        else:
            raise


def validate_table(table):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –µ—Å—Ç—å –≤ –±–∞–∑–µ."""
    check_db_exists()
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (table,))
        if not c.fetchone():
            raise RuntimeError(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")


def normalize(card1, card2, suited):
    """A‚ô† K‚ô£ ‚Üí AKs / AKo"""
    order = "23456789TJQKA"
    r1, r2 = card1[0], card2[0]
    if order.index(r1) < order.index(r2):
        r1, r2 = r2, r1
    combo = f"{r1}{r2}"
    return combo if combo in {"AA", "KK", "QQ", "JJ", "TT"} else f"{combo}{'s' if suited else 'o'}"


def print_table(title, headers, rows):
    print(f"\nüî∏ {title}")
    print(" | ".join(f"{h:<10}" for h in headers))
    print("-" * (len(headers) * 12))
    for row in rows:
        print(" | ".join(f"{str(x):<10}" for x in row))
    print("-" * (len(headers) * 12))
