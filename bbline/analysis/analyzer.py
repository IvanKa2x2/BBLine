# bbline/analysis/analyzer.py
"""
–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å BBLine.

–°—á–∏—Ç–∞–µ—Ç:
‚Ä¢ hands_cnt            ‚Äì —á–∏—Å–ª–æ —Ä—É–∫
‚Ä¢ profit_usd           ‚Äì —Å—É–º–º–∞—Ä–Ω–∞—è –ø—Ä–∏–±—ã–ª—å ($)
‚Ä¢ bb_per_100           ‚Äì –≤–∏–Ω—Ä–µ–π—Ç –≤ bb/100
‚Ä¢ vpip, pfr, 3bet      ‚Äì % –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–µ—Ñ–ª–æ–ø-–º–µ—Ç—Ä–∏–∫
‚Ä¢ wwsf, wt_sd, w_sd    ‚Äì –ø–æ—Å—Ç—Ñ–ª–æ–ø –∏—Ç–æ–≥–∏
‚Ä¢ cbet_flop            ‚Äì —á–∞—Å—Ç–æ—Ç–∞ C-bet –Ω–∞ —Ñ–ª–æ–ø–µ
‚Ä¢ fold_to_3b, fold_to_cbet ‚Äì —á–∞—Å—Ç–æ—Ç–∞ —Ñ–æ–ª–¥–æ–≤

!!! –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É–±–µ–¥–∏—Å—å, —á—Ç–æ
    1) import HH ‚Üí parse_hand
    2) python -m bbline.analysis.rebuild_computed
—É–∂–µ –≥–æ–Ω—è–ª–∏—Å—å –∏ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—ã.
"""

from __future__ import annotations

import sqlite3
from pathlib import Path
from typing import Any, Dict, Tuple

DB = Path(__file__).resolve().parents[1] / "database" / "bbline.sqlite"


def _fetch_one(cur: sqlite3.Cursor, sql: str, params: Tuple[Any, ...] = ()) -> Any:
    cur.execute(sql, params)
    row = cur.fetchone()
    return row[0] if row else None


def get_basic_stats() -> Dict[str, float]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ–¥–Ω–∏–º dict‚Äô–æ–º.
    """
    with sqlite3.connect(DB) as cx:
        cx.row_factory = sqlite3.Row
        cur = cx.cursor()

        # ---------------- –±–∞–∑–æ–≤—ã–µ —á–∏—Å–ª–∞ ----------------
        hands_cnt = _fetch_one(cur, "SELECT COUNT(*) FROM hands WHERE hero_seat IS NOT NULL;") or 0
        if hands_cnt == 0:
            return {"hands_cnt": 0}  # –†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥, –µ—Å–ª–∏ —Ä—É–∫ –Ω–µ—Ç

        profit = _fetch_one(cur, "SELECT SUM(hero_net) FROM hands;") or 0.0

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ë–ë. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è –≤—Å–µ—Ö —Ä—É–∫ –≤ –≤—ã–±–æ—Ä–∫–µ.
        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è, —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç—å bb_size –∏–Ω–∞—á–µ.
        bb_size_row = _fetch_one(
            cur, "SELECT DISTINCT limit_bb FROM hands;"
        )  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ª–∏–º–∏—Ç –æ–¥–∏–Ω
        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω —Ç–∏–ø–∏—á–Ω—ã–π.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –æ–¥–∏–Ω:
        bb_size = bb_size_row if isinstance(bb_size_row, (int, float)) else None
        if (
            bb_size is None
        ):  # –ü–æ–ø—ã—Ç–∫–∞ –≤–∑—è—Ç—å –∏–∑ –ø–µ—Ä–≤–æ–π —Ä—É–∫–∏, –µ—Å–ª–∏ DISTINCT –≤–µ—Ä–Ω—É–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–ª–∏ –Ω–∏—á–µ–≥–æ
            bb_size = _fetch_one(
                cur, "SELECT limit_bb FROM hands WHERE hero_seat IS NOT NULL LIMIT 1;"
            )

        if bb_size is not None and bb_size > 0:
            bb_per_100 = round((profit / hands_cnt) * (100 / bb_size), 2)
        else:
            bb_per_100 = 0.0  # –ò–ª–∏ None, –∏–ª–∏ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ bb_size –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω

        # ------------------- –ø—Ä–µ—Ñ–ª–æ–ø -------------------
        vpip = (
            _fetch_one(
                cur,
                """
            SELECT ROUND(AVG(vpip)*100, 1) FROM computed_stats;
            """,
            )
            or 0.0
        )

        pfr = _fetch_one(cur, "SELECT ROUND(AVG(pfr)*100, 1) FROM computed_stats;") or 0.0
        threebet = _fetch_one(cur, "SELECT ROUND(AVG(threebet)*100, 2) FROM computed_stats;") or 0.0
        fold_to_3b = (
            _fetch_one(cur, "SELECT ROUND(AVG(fold_to_3b)*100, 1) FROM computed_stats;") or 0.0
        )

        # ------------------- –ø–æ—Å—Ç—Ñ–ª–æ–ø ------------------
        cbet_flop = (
            _fetch_one(cur, "SELECT ROUND(AVG(cbet_flop)*100, 1) FROM computed_stats;") or 0.0
        )
        fold_to_cbet = (
            _fetch_one(cur, "SELECT ROUND(AVG(fold_to_cbet)*100, 1) FROM computed_stats;") or 0.0
        )

        wwsf = _fetch_one(cur, "SELECT ROUND(AVG(wwsf)*100, 1) FROM computed_stats;") or 0.0
        wt_sd = _fetch_one(cur, "SELECT ROUND(AVG(wt_sd)*100, 1) FROM computed_stats;") or 0.0
        w_sd = _fetch_one(cur, "SELECT ROUND(AVG(w_sd)*100, 1) FROM computed_stats;") or 0.0

        # -------------- –≥–µ—Ä–æ–π-—Ä–µ–π–∫ –∏ EV future ----------
        hero_rake = _fetch_one(cur, "SELECT ROUND(SUM(hero_rake), 2) FROM hands;") or 0.0

    return {
        "hands_cnt": hands_cnt,
        "profit_usd": round(profit, 2),
        "bb_per_100": bb_per_100,
        "vpip_pct": vpip,
        "pfr_pct": pfr,
        "threebet_pct": threebet,
        "fold_to_3b_pct": fold_to_3b,
        "cbet_flop_pct": cbet_flop,
        "fold_to_cbet_pct": fold_to_cbet,
        "wwsf_pct": wwsf,
        "wt_sd_pct": wt_sd,
        "w_sd_pct": w_sd,
        "hero_rake_usd": hero_rake,
    }


# -------------------- CLI / quick test --------------------
if __name__ == "__main__":
    from pprint import pprint

    stats = get_basic_stats()
    if stats["hands_cnt"] == 0:
        print("üõë –í –±–∞–∑–µ –Ω–µ—Ç —Ä—É–∫ –≥–µ—Ä–æ—è ‚Äì —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∏–º–ø–æ—Ä—Ç–∏—Ä—É–π HH –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–π.")
    else:
        print("========== HERO SUMMARY ==========")
        pprint(stats, sort_dicts=False)
