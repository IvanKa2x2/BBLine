import datetime as dt
import streamlit as st
import pandas as pd
import sqlite3
import json
from bbline.dashboard_data import get_dashboard_stats, get_profit_by_date
from bbline.utils import DB_PATH, _pos_from_seats
from bbline.analysis.leakfinder import run_leakfinder, get_example_hands
from bbline.hands_table import fetch_hands_df
from bbline.replayer.replay_one import display_hand_replay
from bbline.export.json_export import get_hand_compact

st.set_page_config(page_title="BBLine Poker", layout="wide")

# --- sidebar —Ñ–∏–ª—å—Ç—Ä—ã --------------------------------------------------------
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")

# 1. –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
date_col1, date_col2 = st.sidebar.columns(2)
date_from = date_col1.date_input("c", value=dt.date(2025, 1, 1))
date_to = date_col2.date_input("–ø–æ", value=dt.date.today())

# 2. –ª–∏–º–∏—Ç—ã (–ø–æ–¥—Ç—è–Ω–µ–º distinct –∏–∑ –ë–î)
with sqlite3.connect(DB_PATH) as cx:
    limits = sorted({row[0] for row in cx.execute("SELECT DISTINCT limit_bb FROM hands")})
limit_sel = st.sidebar.multiselect("–õ–∏–º–∏—Ç—ã (bb)", limits, default=limits)

# 3. –ø–æ–∑–∏—Ü–∏–∏ hero
positions = ["BB", "SB", "BTN", "CO", "MP", "EP"]
pos_sel = st.sidebar.multiselect("–ü–æ–∑–∏—Ü–∏–∏ hero", positions, default=positions)

# --- main content ---------------------------------------------------------
tab1, tab2, tab3, tab4, tab5 = st.tabs(
    ["üìä Dashboard", "üö® LeakFinder", "üìã –°–ø–∏—Å–æ–∫ —Ä—É–∫", "üÇ° –†–µ–ø–ª–µ–µ—Ä", "üì§ JSON Export"]
)

# –ü–æ–ª—É—á–∞–µ–º hand_id –∏–∑ query_params –¥–ª—è —Ä–µ–ø–ª–µ–µ—Ä–∞
query_hand_id = st.query_params.get("hand_id", None)

with tab1:
    # --- —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É ---------------------------------------------------------
    stats = get_dashboard_stats(
        date_from=str(date_from),
        date_to=str(date_to),
        limits=limit_sel,
        positions=pos_sel,
    )

    # --- –≤—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫ / –≥—Ä–∞—Ñ–∏–∫–∏ -------------------------------------------------
    st.title("BBLine Poker ‚Äî Dashboard Overall")
    cols = st.columns(6)
    cols[0].metric("–†—É–∫ —Å—ã–≥—Ä–∞–Ω–æ", stats["Hands"])
    cols[1].metric("–ü—Ä–æ—Ñ–∏—Ç $", stats["Profit $"])
    cols[2].metric("–ü—Ä–æ—Ñ–∏—Ç (bb)", stats["Profit bb"])
    cols[3].metric("bb/100", stats["TBB/100"])
    cols[4].metric("Rake $", stats["Hero Rake $"])
    cols[5].metric("VPIP %", stats["VPIP"])

    cols2 = st.columns(5)
    cols2[0].metric("PFR %", stats["PFR"])
    cols2[1].metric("WtS %", stats["WtS"])
    cols2[2].metric("WaS %", stats["WaS"])
    cols2[3].metric("WwS %", stats["WwS"])
    cols2[4].metric("WWSF %", stats["WWSF"])

    st.markdown("---")
    st.header("–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ—Ñ–∏—Ç–∞ –ø–æ –¥–∞—Ç–∞–º")

    dates, profit_usd = get_profit_by_date(
        date_from=str(date_from),
        date_to=str(date_to),
        limits=limit_sel,
        positions=pos_sel,
    )

    if not dates:
        st.info("–ù–µ—Ç —Ä—É–∫ –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã.")
    else:
        df = pd.DataFrame(
            {
                "–î–∞—Ç–∞": dates,
                "–ü—Ä–æ—Ñ–∏—Ç $": profit_usd,
            }
        )
        c1, c2 = st.columns(2)
        c1.line_chart(df.set_index("–î–∞—Ç–∞")["–ü—Ä–æ—Ñ–∏—Ç $"])

    # =========================
    # Debug (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
    # =========================
    with st.expander("DEBUG: –í—Å–µ –¥–∞–Ω–Ω—ã–µ", expanded=False):
        st.write(stats)
        st.dataframe(df if "df" in locals() else None)

with tab2:
    st.header("üö® LeakFinder Lite")

    # –ü–æ–ª—É—á–∞–µ–º —É—Ç–µ—á–∫–∏ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    leaks = run_leakfinder(
        date_from=str(date_from),
        date_to=str(date_to),
        limits=limit_sel,
        positions=pos_sel,
        save_tags=True,
    )

    if not leaks:
        st.success("–õ–∏–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! GG üòé")
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫
        cols = st.columns(len(leaks))

        # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é —É—Ç–µ—á–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
        for i, lk in enumerate(leaks):
            with cols[i]:
                st.metric(
                    label=lk["name"],
                    value=f"{lk['value']}%",
                    delta=f"–ø–æ—Ä–æ–≥ {lk['threshold']}%",
                    delta_color="inverse",
                )
                st.markdown(lk["explain"])
                show_examples = st.button(
                    f"–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã ({lk['name']})", key=f"examples_{lk['name']}"
                )
                if show_examples:
                    examples = get_example_hands(lk["name"], n=5, order="loss")
                    if not examples:
                        st.info("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä—É–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞.")
                    else:
                        st.markdown("**–ü—Ä–∏–º–µ—Ä—ã —Ä—É–∫:**")
                        for ex in examples:
                            # –î–µ–ª–∞–µ–º Hand ID –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –¥–ª—è —Ä–µ–ø–ª–µ–µ—Ä–∞
                            st.markdown(
                                f"- [{ex['hand_id']}](?hand_id={ex['hand_id']}) ‚Äî {ex['hero_net']}$"
                            )
                st.markdown("---")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        st.markdown("---")

        # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é heat-map
        st.info("üî• Heat-map –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä—É–∫
        st.info("üéÆ –ü—Ä–∏–º–µ—Ä—ã —Ä—É–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

with tab3:
    st.header("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä—É–∫")
    hands_df = fetch_hands_df(
        date_from=str(date_from),
        date_to=str(date_to),
        limits=limit_sel,
        positions=pos_sel,
    )
    if not hands_df.empty:
        # –î–µ–ª–∞–µ–º HandID –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –≤ DataFrame
        hands_df["HandID"] = hands_df["HandID"].apply(lambda x: f"[{x}](?hand_id={x})")
        st.dataframe(hands_df, hide_index=True)
    else:
        st.info("–ù–µ—Ç —Ä—É–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")

with tab4:
    st.header("üÇ° –†–µ–ø–ª–µ–µ—Ä —Ä–∞–∑–¥–∞—á")
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö hand_id –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
    with sqlite3.connect(DB_PATH) as cx:
        cur = cx.cursor()
        all_hand_ids = [
            row[0]
            for row in cur.execute(
                "SELECT hand_id FROM hands ORDER BY datetime_utc DESC"
            ).fetchall()
        ]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π hand_id: –∏–∑ query_params –∏–ª–∏ –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
    if query_hand_id and query_hand_id in all_hand_ids:
        # –ï—Å–ª–∏ hand_id –ø—Ä–∏—à–µ–ª –∏–∑ URL, –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ
        selected_hand_id_index = all_hand_ids.index(query_hand_id)
        selected_hand_id = st.selectbox(
            "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–∞—á—É", all_hand_ids, index=selected_hand_id_index, key="replayer_select_box"
        )
    else:
        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∏–ª–∏ None
        selected_hand_id = st.selectbox(
            "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–∞—á—É",
            all_hand_ids,
            index=0 if all_hand_ids else None,
            key="replayer_select_box",
        )

    if selected_hand_id:
        display_hand_replay(selected_hand_id)
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ Hand ID –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á–∏.")

with tab5:
    st.header("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞–∑–¥–∞—á –≤ JSON")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞–∑–¥–∞—á —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    with sqlite3.connect(DB_PATH) as cx:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–∞—á–∏ —Å —É—á–µ—Ç–æ–º –¥–∞—Ç –∏ –ª–∏–º–∏—Ç–æ–≤
        query = """
            SELECT h.hand_id, h.hero_seat, h.button_seat
            FROM hands h
            WHERE date(h.datetime_utc) BETWEEN ? AND ?
            AND h.limit_bb IN ({})
            ORDER BY h.datetime_utc DESC 
            LIMIT 100
        """.format(
            ",".join("?" * len(limit_sel))
        )

        params = [str(date_from), str(date_to)] + limit_sel
        rows = cx.execute(query, params).fetchall()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –≤ Python
        hand_ids = []
        for row in rows:
            pos = _pos_from_seats(row[1], row[2])  # hero_seat, button_seat
            if pos in pos_sel:
                hand_ids.append(row[0])
            if len(hand_ids) >= 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–∞—á
                break

    if not hand_ids:
        st.info("–ù–µ—Ç —Ä–∞–∑–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
    else:
        for hand_id in hand_ids:
            col1, col2 = st.columns([3, 1])
            with col1:
                st.write(f"–†–∞–∑–¥–∞—á–∞: {hand_id}")
            with col2:
                if st.button("üìã JSON –¥–ª—è GPT", key=f"json_{hand_id}"):
                    data = get_hand_compact(hand_id)
                    st.code(json.dumps(data, ensure_ascii=False, indent=2), language="json")
