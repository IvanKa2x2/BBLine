# analysis/hero_hands.py
"""
BBLine ‚Äì –æ—Ç—á—ë—Ç –ø–æ –∫–∞—Ä–º–∞–Ω–∫–∞–º Hero
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
  ‚Ä¢ —á–∞—Å—Ç–æ—Ç—É —Ä–∞–∑–¥–∞—á –∫–∞–∂–¥–æ–π —Ä—É–∫–∏
  ‚Ä¢ –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ BB
  ‚Ä¢ winrate (bb/100)
–°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏—Ç –º–∏–Ω—É—Å–æ–≤—ã–µ —Ä—É–∫–∏, –∑–∞—Ç–µ–º –ø–ª—é—Å–æ–≤—ã–µ.
"""

import sqlite3
from collections import defaultdict
from pathlib import Path

DB_PATH = Path("db/bbline.sqlite")


def fetch_hero_cards():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (card1, card2, suited, won_bb)."""
    if not DB_PATH.exists():
        print("‚ùå –ë–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äì —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä.")
        return []

    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()

    cur.execute(
        """
        SELECT hc.card1, hc.card2, hc.suited, p.won_bb
          FROM hero_cards  AS hc
          JOIN players     AS p  ON p.hand_id = hc.hand_id
         WHERE p.player_id = 'Hero'
        """
    )

    rows = cur.fetchall()
    conn.close()
    return rows


def normalize(card1: str, card2: str, suited: int) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–∞–ø–∏—Å—å —Ä—É–∫–∏ (A2s, TJo –∏ —Ç.–ø.)."""
    order = "23456789TJQKA"
    r1, r2 = card1[0], card2[0]

    # —Å—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞ –ø–µ—Ä–≤–æ–π
    if order.index(r1) < order.index(r2):
        r1, r2 = r2, r1

    return f"{r1}{r2}{'s' if suited else 'o'}"


def build_stats(rows):
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä—É–∫–∞–º –∏ —Å—á–∏—Ç–∞–µ—Ç —Å—É–º–º—É/—á–∞—Å—Ç–æ—Ç—É."""
    stats = defaultdict(lambda: {"count": 0, "bb": 0.0})
    for c1, c2, suited, won_bb in rows:
        hand = normalize(c1, c2, suited)
        stats[hand]["count"] += 1
        stats[hand]["bb"] += won_bb or 0.0
    return stats


def print_table(title, items):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã."""
    if not items:
        print(f"üî∏ {title}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n")
        return

    print(f"\nüî∏ {title}")
    print(f"{'Hand':<5} | {'Count':<5} | {'Total BB':<9} | {'bb/100':<8}")
    print("-" * 38)
    for hand, d in items:
        cnt, bb = d["count"], d["bb"]
        bb100 = (bb / cnt) * 100 if cnt else 0
        print(f"{hand:<5} | {cnt:<5} | {bb:<9.2f} | {bb100:<8.2f}")
    print("-" * 38 + "\n")


def main():
    rows = fetch_hero_cards()
    if not rows:
        print("üòì –£ Hero –ø–æ–∫–∞ –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ä—É–∫.")
        return

    stats = build_stats(rows)

    minus = [(h, d) for h, d in stats.items() if d["bb"] < 0]
    plus  = [(h, d) for h, d in stats.items() if d["bb"] >= 0]

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —É–±—ã—Ç–∫–∞/–ø—Ä–∏–±—ã–ª–∏, –ø–æ—Ç–æ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
    minus.sort(key=lambda x: (x[1]["bb"], -x[1]["count"]))  # —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –º–∏–Ω—É—Å —Å–≤–µ—Ä—Ö—É
    plus.sort(key=lambda x: (-x[1]["bb"], -x[1]["count"]))  # —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø–ª—é—Å —Å–≤–µ—Ä—Ö—É

    print_table("–£–±—ã—Ç–æ—á–Ω—ã–µ —Ä—É–∫–∏", minus)
    print_table("–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Ä—É–∫–∏", plus)


if __name__ == "__main__":
    main()
